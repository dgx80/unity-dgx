//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;

namespace DGX.Action
{
    public class StateMachine : ObjectBase
    {
        #region ATTRIBUTES
        
        private List<ActionBase> mActions = new List<ActionBase>();
        private ActionBase mCurrentAction = null;
        private ActionBase mDefaultAction = null;
        private int mNextActionId = -1;
        private bool mIsChangeAction = false;
        private bool mIsNewStateStarted = false;

        #endregion

        #region CONSTRUCTOR

        public StateMachine ()
            : base()
        {
        }
        #endregion

        #region EVENTS

        #endregion
        #region UPDATE
        public virtual void handleUpdate()
        {
            bool mustUpdateYet = false;
            bool bAction = mCurrentAction != null;
            mIsNewStateStarted = false;

            if (mIsChangeAction && bAction) {
                //here change action so call ending
                mCurrentAction.Stop ();
            }
            bool bGotoNextAction = false;
            //false mean that action stopped
            if (bAction) {
                bool isNotFinished = mCurrentAction.handleUpdate ();
                if (isNotFinished == false)
                {
                    bGotoNextAction = true;
                } else {
                    if (mCurrentAction.IS_TRIGGERED) {
                        startNewAction(mCurrentAction.CURRENT_TRIGGER_ID, true);
                    }
                }
            } else if (mIsChangeAction) {
                bGotoNextAction = true;
            }
            if (bGotoNextAction) {
                if (mIsChangeAction) {
                    mIsChangeAction = false;
                    mCurrentAction = mActions [mNextActionId];
                    mCurrentAction.Start();
                    mIsNewStateStarted = true;
                } else if (mDefaultAction != null){
                    mCurrentAction = mDefaultAction;
                    mCurrentAction.Start();
                    mIsNewStateStarted = true;
                } else {
                    mCurrentAction = null;
                }
            }
        }
        
        #endregion
        #region ACTIONS

        protected ActionBase addAction(ActionBase action)
        {
            mActions.Add (action);
            if (mActions.Count == 1) {
                ACTION_DEFAULT = action;
            }
            return action;
        }

        /// <summary>
        /// Starts the new action.
        /// </summary>
        /// <returns><c>true</c>, if new action was started, <c>false</c> otherwise.</returns>
        /// <param name="id">Identifier.</param>
        protected bool startNewAction(int id, bool isForceToRestartWhenTheSameAction)
        {
            if (id >= 0 && id < mActions.Count) {
                if (!isForceToRestartWhenTheSameAction && mCurrentAction != null && mCurrentAction.ID == id) {
                    return false;
                }
                mIsChangeAction = true;
                mNextActionId = id;
                return true;
            }
            return false;
        }

        public void setIsDebug(bool b)
        {
            DEBUG = b;
            
            foreach (ActionBase action in mActions) {
                action.DEBUG = b;
            }
        }
        #endregion
        #region PROPERTIES

        protected ActionBase ACTION_DEFAULT
        {
            get{ return mDefaultAction;}
            set{ mDefaultAction = value;}    
        }
        public override string OWNER
        {
            set
            {
                base.OWNER = value;
                foreach (ActionBase action in mActions) {
                    action.OWNER = value;
                }
            }
        }
        
        public int ACTION_CURRENT_ID
        {
            get 
            { 
                if(mCurrentAction != null) {
                    return mCurrentAction.ID;
                }
                return -1;
            }
        }
        protected bool IS_NEW_STATE_STARTED
        {
            get { return mIsNewStateStarted; }
        }
             
        #endregion
    }
}

