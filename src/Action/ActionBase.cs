//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace DGX.Action
{
    public class ActionBase : ObjectBase
    {
        #region DECLARATION

        public enum eActionState
        {
            stopped = 0,
            init = 1,
            run = 2,
            ending = 3
        }

        #endregion

        #region ATTRIBUTES

        private eActionState mActionState = eActionState.stopped;
        private int mId;
        private bool mIsOnce = false;
        private Dictionary<int,int> mTriggers = new Dictionary<int, int>();
        private bool mIsTrigerred;
        private int mCurrentTriggerState;

        #endregion

        #region CONSTRUCTOR

        public ActionBase(int id, bool isOnce)
        {
            mId = id;
            mIsOnce = isOnce;
        }

        #endregion

        #region EVENTS

        protected virtual void handleInit ()
        {
            mIsTrigerred = false;
            STATE = eActionState.run;
        }
        protected virtual void handleRun ()
        {
            if (mIsOnce) {
                STATE = eActionState.ending;
            }
        }

        protected virtual void handleEnding ()
        {
            STATE = eActionState.stopped;
        }

        #endregion

        #region UPDATE

        public bool handleUpdate()
        {
            switch (mActionState)
            {
            case eActionState.init:
                handleInit();
                break;
            case eActionState.run:
                handleRun();
                break;
            case eActionState.ending:
                handleEnding();
                break;
            }
            bool isNotStopped = !IS_STOPPED;
            //return true until is stopped
            return isNotStopped;
        }

        #endregion

        #region ACTIONS
        public bool Start()
        {
            if (mActionState != eActionState.stopped) {
                return false;
            }
            STATE = eActionState.init;
            return true;
        }
        public bool Stop()
        {
            if (mActionState != eActionState.run) {
                return false;
            }
            STATE = eActionState.ending;
            return true;
        }
        public void addTrigger(int state, ActionBase action)
        {
            mTriggers.Add((int)state, action.ID);
        }
        protected void setTrigger(int triggerState)
        {
            mIsTrigerred = true;
            mCurrentTriggerState = triggerState;
        }
        #endregion

        #region PROPERTIES
        
        public int ID
        {
            get 
            {
                return mId;
            }
        }
        public bool IS_TRIGGERED
        {
            get
            {
                return mIsTrigerred;
            }
        }
        public int CURRENT_TRIGGER_ID
        {
            get 
            {
                int actionId = 0;
                if (mTriggers.ContainsKey(mCurrentTriggerState)) {
                    actionId = mTriggers[mCurrentTriggerState];
                }
                return actionId;
            }
        }
        protected bool IS_TRIGGER_EXISTS
        {
            get{
                return (mTriggers.Count > 0);
            }
        }
        protected eActionState STATE
        {
            get 
            {
                return mActionState;
            }
            set {
                mActionState = value;
            }
        }
        public bool IS_STOPPED
        {
            get { return mActionState == eActionState.stopped;}
        }

        #endregion

        #region UTILITY

        #endregion

    }
}

