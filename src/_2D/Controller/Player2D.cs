//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections;
using UnityEngine;

namespace DGX.Controller._2D
{
	[RequireComponent (typeof (Controller2D))]
	public class Player2D : MonoBehaviour
	{
		public float jumpHeight = 4;
		public float timeToJumpApex = 0.4f;
		public float accelationTimeAirborne = 0.2f;
		public float accelationTimeGrounded = 0.1f;
		public float moveSpeed = 6;

		public Controller2D controller;
		private float gravity ;
		private Vector3 velocity;
		private float jumpVelocity;
		private float velocityXSmoothing;
		private Vector2 input;
		private AudioSource mAudioSource;

		void Start()
		{
			controller = GetComponent<Controller2D>();
			gravity = -(2 * jumpHeight) / Mathf.Pow(timeToJumpApex, 2);
			jumpVelocity = Mathf.Abs(gravity) * timeToJumpApex;
			input = Vector2.zero;
			mAudioSource = GetComponent<AudioSource>();
			print("Gravity: " + gravity + " Jump Velocity: " + jumpVelocity);
		}

		void Update()
		{
			if (controller.collisions.above || controller.collisions.below) {
				velocity.y = 0;
			}

			if ( isGrounded() && Input.GetButtonDown("Jump")) {
				velocity.y = jumpVelocity;
				controller.Jump();
				mAudioSource.Play();
			}

			input = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical"));
			float t = Time.deltaTime;
			float targetVelocityX = input.x * moveSpeed;

			velocity.x = Mathf.SmoothDamp(
				velocity.x, targetVelocityX,
				ref velocityXSmoothing,
				(controller.collisions.below) ? accelationTimeGrounded : accelationTimeAirborne
				);
			velocity.y += gravity * t;
			controller.Move(velocity * t);
		}
		public Vector3 VELOCITY
		{
			get { return velocity;}
		}
		public bool isGrounded()
		{
			return !controller.collisions.jumping;
		}
		public Vector2 INPUT
		{
			get { return input;}
		}

	}
}

