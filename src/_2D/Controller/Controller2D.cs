//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace DGX.Controller._2D
{
	[RequireComponent (typeof (BoxCollider2D))]
	public class Controller2D : MonoBehaviour
	{
		public LayerMask collisionMask;
		const float skinWidth= 0.015f;
		public new BoxCollider2D collider;
		private RayCastOrigins rayCastOrigins;
		public int horizontalRayCount = 4;
		public int verticalRayCount = 4;
		public CollisionInfo collisions;

		private float maxClimbAngle = 80.0f;
		private float maxDescendAngle = 75.0f;
		private float horizontalRaySpacing;
		private float verticalRaySpacing;

		void Start() {
			collider = GetComponent<BoxCollider2D>();
			rayCastOrigins = new RayCastOrigins();
			CalculateRaySpacing();
			collisions.Init();
		}

		public void Move(Vector3 velocity)
		{
			UpdateRaycastOrigins();
			collisions.Reset();
			collisions.velocityOld = velocity;

			if (velocity.y < 0) {
				DescendSlope(ref velocity);
			}
			if (velocity.x != 0) {
				HorizontalCollisions(ref velocity);
			}
			if (velocity.y != 0) {
				VerticalCollisions(ref velocity);
			}
			transform.Translate(velocity);
		}
		public void Jump()
		{
			print ("jump");
			collisions.jumping = true;
		}
		private void HorizontalCollisions(ref Vector3 velocity)
		{
			float directionX = Mathf.Sign(velocity.x);
			float rayLength = Mathf.Abs(velocity.x) + skinWidth;
			for( int i =0; i < horizontalRayCount; i++) {
				float currentRaySpacing = horizontalRaySpacing * i;
				Vector3 start = rayCastOrigins.bottomLeft + Vector2.right * currentRaySpacing;
				Vector3 direction = Vector2.up * -2;
				Vector2 rayOrigin = (directionX == -1) ? rayCastOrigins.bottomLeft : rayCastOrigins.bottomRight;
				rayOrigin += Vector2.up * (currentRaySpacing);
				RaycastHit2D hit = Physics2D.Raycast(rayOrigin, Vector2.right * directionX, rayLength, collisionMask);

				//Debug.DrawRay(rayOrigin, Vector2.right * directionX * rayLength, Color.red);
				 
				if (hit) {
					float slopeAngle = Vector2.Angle(hit.normal, Vector2.up);
					if ( i == 0 && slopeAngle <= maxClimbAngle) {
						if (collisions.descendingSlope) {
							collisions.descendingSlope = false;
							velocity = collisions.velocityOld;
						}
						float distanceToSlopeStart = 0;
						if (slopeAngle != collisions.slopeAngleOld) {
							distanceToSlopeStart = hit.distance - skinWidth;
							velocity.x -= distanceToSlopeStart * directionX;
						}
						ClimbSlope(ref velocity, slopeAngle);
						velocity.x += distanceToSlopeStart * directionX;
					}

					if (!collisions.climbingSlope || slopeAngle > maxClimbAngle) {
						velocity.x = (hit.distance - skinWidth) * directionX;
						rayLength = hit.distance;

						if (collisions.climbingSlope) {
							velocity.y = Mathf.Tan(collisions.slopeAngle * Mathf.Deg2Rad) * Mathf.Abs(velocity.x);
						}
						collisions.left = directionX == -1;
						collisions.right = directionX == 1;
					}
				}
            }
		}

		private void VerticalCollisions(ref Vector3 velocity)
		{
			float directionY = Mathf.Sign(velocity.y);
			float rayLength = Mathf.Abs(velocity.y) + skinWidth;
			for( int i =0; i < verticalRayCount; i++) {
				float currentRaySpacing = verticalRaySpacing * i;
				Vector2 rayOrigin = (directionY == -1) ? rayCastOrigins.bottomLeft : rayCastOrigins.topLeft;
				rayOrigin += Vector2.right * (currentRaySpacing + velocity.x);
				RaycastHit2D hit = Physics2D.Raycast(rayOrigin, Vector2.up * directionY, rayLength, collisionMask);

				//Debug.DrawRay(rayOrigin, Vector2.up * directionY * rayLength, Color.red);
				
                if (hit) {
                    velocity.y = (hit.distance - skinWidth) * directionY;
                    rayLength = hit.distance;

					if (collisions.climbingSlope) {
						velocity.x = velocity.y / Mathf.Tan(collisions.slopeAngle * Mathf.Deg2Rad) * Mathf.Sign(velocity.x);
					}
					collisions.below = (directionY == -1);
					collisions.above = (directionY == 1);
					collisions.jumping = false;
					print ("grounded");
                }
            }
			if (collisions.climbingSlope) {
				float directionX = Mathf.Sign(velocity.x);
				rayLength = Mathf.Abs(velocity.x) + skinWidth;
				Vector2 rayOrigin = ((directionX == -1) ? rayCastOrigins.bottomLeft:rayCastOrigins.bottomRight) + Vector2.up * velocity.y;
				RaycastHit2D hit = Physics2D.Raycast(rayOrigin, Vector2.right * directionX, rayLength, collisionMask);

				if (hit) {
					float slopeAngle = Vector2.Angle(hit.normal, Vector2.up);
					if (slopeAngle != collisions.slopeAngle) {
						velocity.x = (hit.distance - skinWidth) * directionX;  
						collisions.slopeAngle = slopeAngle;
					}
				}
			}
        }

		private void ClimbSlope(ref Vector3 velocity, float slopeAngle)
		{
			float moveDistance = Mathf.Abs(velocity.x);
			float climbVelocityY = Mathf.Sin(slopeAngle * Mathf.Deg2Rad) * moveDistance;

			if (velocity.y <= climbVelocityY) {
				velocity.y = climbVelocityY;
				velocity.x = Mathf.Cos(slopeAngle * Mathf.Deg2Rad) * moveDistance * Mathf.Sign(velocity.x); 
				collisions.below = true;
				collisions.climbingSlope = true;
				collisions.slopeAngle = slopeAngle;
			}
		}

		private void DescendSlope(ref Vector3 velocity)
		{
			float directionX = Mathf.Sign(velocity.x);
			Vector2 rayOrigin = (directionX == -1) ? rayCastOrigins.bottomRight : rayCastOrigins.bottomLeft;
			RaycastHit2D hit = Physics2D.Raycast(rayOrigin, - Vector2.up, Mathf.Infinity, collisionMask);

			if (hit) {
				float slopeAngle = Vector2.Angle(hit.normal, Vector2.up);
				if (slopeAngle != 0 && slopeAngle <= maxDescendAngle) {
					if (Mathf.Sign (hit.normal.x) == directionX) {
						if (hit.distance - skinWidth <= Mathf.Tan(slopeAngle * Mathf.Deg2Rad) * Mathf.Abs (velocity.x)) {
							float moveDistance = Mathf.Abs(velocity.x);
							float descendVelocityY = Mathf.Sin(slopeAngle * Mathf.Deg2Rad) * moveDistance;
							velocity.x = Mathf.Cos(slopeAngle * Mathf.Deg2Rad) * moveDistance * Mathf.Sign(velocity.x); 
							velocity.y -= descendVelocityY;

							collisions.slopeAngle = slopeAngle;
							collisions.descendingSlope = true;
							collisions.below = true;
						}
					}
				}
			}
		}

        private void UpdateRaycastOrigins() {
			Bounds bounds = collider.bounds;
			bounds.Expand(skinWidth * -2);
			rayCastOrigins.bottomLeft = new Vector2(bounds.min.x, bounds.min.y);
			rayCastOrigins.bottomRight = new Vector2(bounds.max.x, bounds.min.y);
			rayCastOrigins.topLeft = new Vector2(bounds.min.x, bounds.max.y);
			rayCastOrigins.topRight = new Vector2(bounds.max.x, bounds.max.y);
		}
		private void CalculateRaySpacing() {
			Bounds bounds = collider.bounds;
			bounds.Expand(skinWidth * -2);

			horizontalRayCount = Mathf.Clamp(horizontalRayCount, 2, int.MaxValue);
			verticalRayCount = Mathf.Clamp(verticalRayCount, 2, int.MaxValue);

			horizontalRaySpacing = bounds.size.y / (horizontalRayCount-1);
			verticalRaySpacing = bounds.size.x / (verticalRayCount-1);
		}

		struct RayCastOrigins {
			public Vector2 topLeft, topRight;
			public Vector2 bottomLeft, bottomRight;
		}
		public struct CollisionInfo
		{
			public bool above, below;
			public bool left, right;
			public bool climbingSlope;
			public bool descendingSlope;
			public float slopeAngle, slopeAngleOld;
			public Vector3 velocityOld;
			public bool jumping;

			public void Init()
			{
				jumping = false;
			}
			public void Reset()
			{
				above = below = false;
				right = left = false;
				climbingSlope = false;
				descendingSlope = false;
				slopeAngleOld = slopeAngle;
				slopeAngle = 0.0f;
			}
		}
	}
}

