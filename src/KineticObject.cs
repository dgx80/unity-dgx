//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using UnityEngine;

namespace DGX
{
    public class KineticObject : ObjectBase
    {
        public float MAX_SPEED = 60;
        private float mSpeed = 0;
        private float mAccelateRate = 1.0f;
        private float mDecelarateRate = 10.0f;

        public KineticObject ()
            : base()
        {
            
        }

        protected bool incrementSpeed()
        {
            if (mSpeed + 1.0f < MAX_SPEED) {
                mSpeed += 1.0f;
                return true;
            }
            return false;
        }
        /// <summary>
        /// Decrements the speed.
        /// </summary>
        /// <returns><c>true</c>, if speed was decremented, <c>false</c> otherwise.</returns>
        protected bool decrementSpeed()
        {
            if (mSpeed - 1.0f >= 0) {
                mSpeed -= 1.0f;
                return true;
            }
            return false;
        }
        protected void resetSpeed()
        {
            mSpeed = 0.0f;
        }
     
        public virtual void applySpeedInfluence(float percent)
        {
            float newSpeed = percent * MAX_SPEED;
            
            float diff = (newSpeed - mSpeed);
            
            
            if (diff > 0.0f) {
                diff *= mAccelateRate;
            } else if (diff < 0.0f){
                diff *= mDecelarateRate;
            }
            
            diff *= Time.deltaTime;
            
            mSpeed += diff;
            if(mSpeed > MAX_SPEED) {
                mSpeed = MAX_SPEED;
            } else if(mSpeed < 0.01f) {
                mSpeed = 0.0f;
            }
                
        }
            
        virtual protected Vector3 handleMove(float horizontal, float vertical)
        {
            float realSpeed = 0.1f * SPEED;
            float time = Time.deltaTime;
            float x = (horizontal) * time * realSpeed;
            float z = (vertical) * time * realSpeed;
            Vector3 v = new Vector3 (x, 0, z);
            return v;
        }
        public virtual float SPEED
        {
            get { return mSpeed;}
            set {mSpeed = value;}
        }
    }
}

