//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using DGX.Character.Action;
    
namespace DGX.Character
{
    public class FighterStateMachine : DGX.Action.StateMachine
    {
        #region DECLARATION
        
        public enum eCharacterState
        {
            idle = 0,
            attack,
            run,
            die,
            walk,
            jump
        }
        #endregion
        #region ATTRIBUTES
        private ActionIdle mActionIdle;
        private ActionAttack mActionAttack;
        private ActionRun mActionRun;
        private ActionDie mActionDie;
        
        #endregion

        #region CONSTRUCTOR

        public FighterStateMachine (
            Fighter fighter,
            float runSpeed
        ) : base()
        {
            Character.Anim.FighterAnimation fighterAnimation = fighter.GetComponent<Character.Anim.FighterAnimation> ();
            Character.Anim.MoveableAnimation moveableAnimation = fighter.GetComponent<Character.Anim.MoveableAnimation> ();
            CharacterController characterController = fighter.GetComponent<CharacterController> ();
            
            mActionIdle = new ActionIdle ((int)eCharacterState.idle, moveableAnimation);
            mActionAttack = new ActionAttack ((int)eCharacterState.attack, fighter);
            mActionRun = new ActionRun ((int)eCharacterState.run, moveableAnimation, fighter.transform, characterController, runSpeed);
            mActionDie = new ActionDie ((int)eCharacterState.die, fighterAnimation);
    
            addAction (mActionIdle);
            addAction (mActionAttack);
            addAction (mActionRun);
            addAction (mActionDie);
            
            startNewAction ((int)eCharacterState.idle, false);
        }
        #endregion

        #region EVENTS
        
        #endregion
        #region UPDATE
        
        #endregion
        #region ACTIONS
        /// <summary>
        /// Ons the attack.
        /// </summary>
        /// <returns><c>true</c>, if attack was oned, <c>false</c> otherwise.</returns>
        public bool onAttack(UnityEngine.GameObject opponent, int damage)
        {
            bool result = startNewCharacterState (eCharacterState.attack, false);
            if (result) {
                mActionAttack.OPPONENT = opponent;
                mActionAttack.DAMAGE = damage;
            }
            return result;
        }
        public bool onRunTo(UnityEngine.Vector3 position)
        {
            switch ((eCharacterState)ACTION_CURRENT_ID) {
            case eCharacterState.attack:
                return false;
            case eCharacterState.idle:
            case eCharacterState.walk:
                mActionRun.VECTOR_TARGET = position;
                startNewCharacterState(eCharacterState.run, false);
                break;
            case eCharacterState.run:
                mActionRun.VECTOR_TARGET = position;
                break;
            }
            
            return true;
        }
        public bool onIdle()
        {
            return startNewCharacterState(eCharacterState.idle, false);
        }
        public bool onDie()
        {
            return startNewCharacterState (eCharacterState.die, false);
        }
        #endregion
        #region PROPERTIES
        
        public eCharacterState CHARACTER_STATE
        {
            get {return (eCharacterState)ACTION_CURRENT_ID;}
        }
        #endregion
        #region UTILITY
        protected bool startNewCharacterState(eCharacterState state, bool forceResetAction)
        {
            LOGGER.log ("start new state:" + state.ToString ());
            return startNewAction((int)state, false);
        }
        
        #endregion
    }
}

