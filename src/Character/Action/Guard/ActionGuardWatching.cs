//
// GuardWatchning.cs
//
// Author:
//       Razan <>
//
// Copyright (c) 2015 Razan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace DGX.Character.Action.Guard
{
    public class ActionGuardWatching : ActionFighterBase
    {
        #region DECLARATION
        
        public enum eTrigger
        {
            found = 0
        }
        
        #endregion
        
        #region ATTRIBUTES
        private UnityEngine.Camera mCamera;
        private Plane[] planes;
        
        #endregion
        public ActionGuardWatching (int id, Fighter fighter)
        : base (id, fighter)
        {
            mCamera = FIGHTER.CAMERA;
            DEBUG = true;
        }
        
        protected override void handleInit ()
        {
            base.handleInit();
            mCamera = FIGHTER.CAMERA;
        }
        
        protected override void handleRun ()
        {
            base.handleRun ();
            FIGHTER.debugFieldOfView();
            if (FIGHTER.OPPONENT == null || mCamera == null) {
                return;
            }
            
            //Fighter fOpponent = FIGHTER.OPPONENT.GetComponent<Fighter>();
            planes = GeometryUtility.CalculateFrustumPlanes(FIGHTER.CAMERA);
            Collider collider = FIGHTER.OPPONENT.GetComponent<Collider>();
            if ( GeometryUtility.TestPlanesAABB(planes, collider.bounds)) {
                LOGGER.log("found");
                checkForPlayer();
                setTrigger((int)eTrigger.found);
            }
            //float distance = Vector3.Distance (FIGHTER.OPPONENT.transform.position, FIGHTER.transform.position);
            //if (distance <= 4) {
                
            //}
        }
        
        private void checkForPlayer()
        {
            RaycastHit hit;
            if (Physics.Raycast (mCamera.transform.position, FIGHTER.transform.forward, out hit, 10)) {
                //chase
            }
        }
    }
}

