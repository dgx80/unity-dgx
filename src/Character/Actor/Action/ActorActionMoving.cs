//
// ActorActionMoving.cs
//
// Author:
//       Razan <>
//
// Copyright (c) 2015 Razan
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DGX.Character.Anim;
using UnityEngine;

namespace DGX.Character.Action
{
    public class ActorActionMoving : DGX.Action.ActionBase
    {
        private Vector3 mTargetPoint;
        private Transform mTransform;
        private CharacterController mCharacterController;
        private Vector3 mDirection;
        private ScalableSpeed mScalableSpeed;
        
        Quaternion mNewRotation;
        
        public ActorActionMoving (int id, Transform transform, CharacterController characterController, ScalableSpeed scalableSpeed)
            : base (id, false)
        {
            mTransform = transform;
            mCharacterController = characterController;
            mScalableSpeed = scalableSpeed;
        }
        protected override void handleInit ()
        {
            base.handleInit ();
            updateRotation();
            updateMoving();
        }
        protected override void handleRun ()
        {
            base.handleRun ();
         
            updateRotation();
            updateMoving();
        }
        
        protected void updateRotation()
        {
            mNewRotation = Quaternion.LookRotation (mDirection, mTransform.forward);
            mNewRotation.x = 0f;
            mNewRotation.z = 0f;
            
            float diff = Quaternion.Angle(mTransform.rotation, mNewRotation);
            bool isTurnQuickly = (Math.Abs(diff) > 30.0f);
            if (isTurnQuickly) {
                mTransform.LookAt (mTransform.position + mDirection);
            } else {
                
                mTransform.rotation = Quaternion.Slerp (mTransform.rotation, mNewRotation, Time.deltaTime*5);
            }
        }
        public void updateMoving()
        {
            if (mScalableSpeed.SPEED > 0) {
                Vector3 moving  = mTransform.forward * mScalableSpeed.getScaledSpeed() * 0.1f;
                
                if (!mCharacterController.isGrounded) {
                    
                    //moving.y -= 9.81f * Time.deltaTime;
                }
                mCharacterController.Move(moving);
            } else {
                Stop();
            }
        }
        public Vector3 VECTOR_TARGET { 
            get{ return mTargetPoint;}
            set
            { 
                mTargetPoint = value;
            }
        }
        public Vector3 DIRECTION
        {
            set{mDirection = value;}
        }
    }
}

