//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using DGX.Character;

namespace DGX.Controller
{
    public class JoyStick
    {
        public JoyStick ()
        {
        }
        protected bool isAction0()
        {
            return isInput (KeyCode.Joystick1Button0);
        }
        protected bool isAction1()
        {
            return isInput (KeyCode.Joystick1Button1);
        }
        protected bool isAction2()
        {
            return isInput (KeyCode.Joystick1Button2);
        }
        protected bool isAction3()
        {
            return isInput (KeyCode.Joystick1Button3);
        }
        protected bool isAction4()
        {
            return isInput (KeyCode.Joystick1Button4);
        }
        protected bool isAction5()
        {
            return isInput (KeyCode.Joystick1Button5);
        }
        protected bool isAction6()
        {
            return isInput (KeyCode.Joystick1Button6);
        }
        protected bool isAction7()
        {
            return isInput (KeyCode.Joystick1Button7);
        }
        protected bool isAction8()
        {
            return isInput (KeyCode.Joystick1Button8);
        }
        protected bool isAction9()
        {
            return isInput (KeyCode.Joystick1Button9);
        }
        protected bool isAction10()
        {
            return isInput (KeyCode.Joystick1Button10);
        }
        protected bool isAction11()
        {
            return isInput (KeyCode.Joystick1Button11);
        }
        protected bool isAction12()
        {
            return isInput (KeyCode.Joystick1Button12);
        }
        private bool isInput(KeyCode key)
        {
            if (Input.GetKeyDown (key)) {
                return true;
            }    
            return false;
        }
        public bool isJump()
        {
            return Input.GetButtonDown("Jump");
        }
        public void detectPressedKeyOrButton()
        {
            foreach(KeyCode kcode in Enum.GetValues(typeof(KeyCode)))
            {
                if (Input.GetKeyDown(kcode))
                    Debug.Log("KeyCode down: " + kcode);
            }
        }
        public void getHorizontalAxis(ref float value)
        {
            value = Input.GetAxis("Horizontal");
            //if (value != 0) {
            //    Debug.Log ("analog horizontal: " + value);
            //}
        }
        public void getVerticalAxis(ref float value)
        {
            value = Input.GetAxis("Vertical");
        }
    }
}

